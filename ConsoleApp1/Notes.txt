Partial Class : 

It is possible to split the definition of a class, a struct, an interface or a method over two or more source files. Each source file contains a section of the type or method definition, and all parts are combined when the application is compiled.

Partial Classes
There are several situations when splitting a class definition is desirable:

When working on large projects, spreading a class over separate files enables multiple programmers to work on it at the same time.
When working with automatically generated source, code can be added to the class without having to recreate the source file. Visual Studio uses this approach when it creates Windows Forms, Web service wrapper code, and so on. You can create code that uses these classes without having to modify the file created by Visual Studio.
When using source generators to generate additional functionality in a class.

Access modifiers : 

public: The type or member can be accessed by any other code in the same assembly or another assembly that references it.
private: The type or member can be accessed only by code in the same class or struct.
protected: The type or member can be accessed only by code in the same class, or in a class that is derived from that class.
internal: The type or member can be accessed by any code in the same assembly, but not from another assembly.
protected internal: The type or member can be accessed by any code in the assembly in which it's declared, or from within a derived class in another assembly.
private protected: The type or member can be accessed only within its declaring assembly, by code in the same class or in a type that is derived from that class.

OOPs, provide 4 principles. They are

Encapsulation
Inheritance
Polymorphism
Abstraction

What are Abstraction and Encapsulation?

The process of representing the essential features without including the background details is called Abstraction.
In simple words, we can say that it is a process of defining a class by providing necessary details to call the object 
operations (i.e. methods) by hiding or removing its implementation details.

The process of binding the data and functions together into a single unit (i.e. class) is called Encapsulation. 
In simple words, we can say that it is a process of creating a class by hiding its internal data members from
outside the class and accessing those internal data members only through publicly exposed methods or properties.
Data encapsulation is also called data hiding because by using this principle we can hide the internal data from outside the class.

Abstraction and Encapsulation are related to each other. 
We can say that Abstraction is logical thinking whereas Encapsulation is its physical implementation.